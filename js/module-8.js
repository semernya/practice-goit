/* 
Поширення подій(event propagation) - термін, описує життєвий цикл події, що ділиться на 3 етапи:
1. Capturing phase(занурення) - подія стартує з window і тоне до найглибшого цільового ел., на якому відбулась подія.
2. Target phase (таргетинг) - етап, на якому ел. повідомляють, що на ньому відбулась подія.
3. Bubbling phase (спливання) - кінцева фаза, спливає від найглибшого ел через усі ел.-предки до window.
    Обробники спрацьовують від цільов. ел. по всім предкам і до window.
Приклад:
*/
const parent = document.querySelector("#parent");
const child = document.querySelector("#child");
const descendant = document.querySelector("#descendant");

// тут показано як це працює
parent.addEventListener("click", () => {
  console.log("Parent click handler");
});

child.addEventListener("click", () => {
  console.log("Child click handler");
});

descendant.addEventListener("click", () => {
  console.log("Descendant click handler");
});
//при кліку на descendant спрацюють події на child, потім на parent
/*
Елемент, на якому відбулася подія, називається цільовим, або вихідним. 
Це завжди найглибший елемент, з якого починається спливання. Він доступний як event.target
 - event.target - лінк на вихідний ел, на якому сталась подія (у процесі спливання вона незмінна)
 - event.currentTarget - лінк на поточний ел., до якого прив'язаний поточний обробник події, і до якого в результаті спливання дішла прослуховувана подія
    ел., де подія фактично відбулася (event.target)
    ел., до якого подія спливла, і обробник її перехопив (event.currentTarget).
*/
parent.addEventListener("click", (event) => {
  console.log("event.target: ", event.target);//виведе child
  console.log("event.currentTarget: ", event.currentTarget);//виведе parent
});
/*
Проміжні обробники можуть зупинити спливання подій
1. event.stopPropagation() - метод, зупиняє "спливання" події в DOM-дереві. Жоден батьківський ел. не зможе відловити цю подію.
    Не заважає іншим обробникам подій виконуватися на тому ж самому елементі.
2. event.stopImmediatePropagation() - метод, Зупиняє "спливання" події так само.
    Також зупиняє виконання всіх інших обробників подій, які слухають цю ж подію на даному елементі, 
    навіть якщо вони були зареєстровані перед цим.
Без необхідності не треба зупиняти події.
*/
/* 
Делегування подій (event delegation) - додавання 1 слухача на вспільного предка цих елементів.
Кроки делегування:
1. Визначити спільного предка групи елементів для відстеження подій.
2. Зареєструвати на елементі-предку обробник події, яку ми хочемо відловлювати з групи елементів.
3. В обробнику використовувати event.target для вибору цільового елемента, на якому безпосередньо відбулась подія.
*/
const box = document.querySelector("div.box");
box.addEventListener("click", function (event) {
  console.log(event.target);
});
/*
Перевірка цільового елемента події
- nodeName - вл-сть, що перевіряє тип елемента.
Приклад:
if (event.target.nodeName !== "BUTTON") {
    return; // користувач клікнув між кнопками, нічого не відбувається
  }
*/

/*
Бібліотеки - це набір попередньо написаних функцій, методів і класів, який надає розробнику готові інструменти для вирішення певних завдань.
CDN (Content Delivery Network) — це географічно розподілена мережева інфраструктура. Вона забезпечує швидку доставку контенту (такого як стилі, скрипти, зображення та інші ресурси) користувачам вебсервісів і сайтів. 
    Сервери, що входять до складу CDN, географічно розташовуються в різних частинах світу таким чином, щоб зробити час відповіді для користувачів сайту/сервісу мінімальним.
    Мета CDN - поліпшити продуктивність і доступність вебсайту для користувачів, зменшивши затримки під час завантаження контенту.

Приклад підключення бібліотеки:
1. async додати в скрипт бібліотеки, щоб та швидко підвантажилась
2. скрипт бібліотеки завжди перед моїм скриптом
<body>
    <!-- HTML-markup -->

    <!-- Lodash library script file -->
		<script async src="<https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js>"></script>
    <!-- Your script file -->
    <script defer src="path/to/script.js"></script>
  </body>
*/

/*
Деструктуризація(Destructuring) — це особливий синтаксис, що дозволяє витягти значення зі структур даних, такі як об'єкти або масиви, і присвоїти їх змінним.
*/
//без деструктуризації:
const user = { 
	name: "Jacob", 
	age: 32 
};
console.log(user.name); // Jacob
console.log(user.age); // 32

//з деструктуризацією:
const user1 = { 
	firstName: "Jacob", 
	yo: 32 
};
const { firstName, yo } = user1;
console.log(firstName); // Jacob
console.log(yo); // 32